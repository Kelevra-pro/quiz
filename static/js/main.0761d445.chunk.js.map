{"version":3,"sources":["components/Navigation/MenuToggle/MenuToggle.module.scss","components/Navigation/Drawer/Drawer.module.scss","containers/Quiz/Quiz.module.scss","components/ActiveQuiz/ActiveQuiz.module.scss","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.module.scss","components/FinishedQuiz/FinishedQuiz.module.scss","components/UI/Button/Button.module.scss","hoc/Layout/Layout.module.scss","components/UI/Backdrop/Backdrop.module.scss","components/ActiveQuiz/AnswersList/AnswersList.module.scss","components/Navigation/MenuToggle/MenuToggle.js","components/UI/Backdrop/Backdrop.js","components/Navigation/Drawer/Drawer.js","hoc/Layout/Layout.js","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","components/UI/Button/Button.js","components/FinishedQuiz/FinishedQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuToggle","props","cls","classes","isOpen","push","open","className","join","onClick","onToggle","Backdrop","links","Drawer","map","link","index","key","this","close","renderLinks","onClose","Component","Layout","state","menu","toggleMenuHandler","setState","menuCloseHandler","children","AnswerItem","onAnswerClick","answer","id","text","AnswersList","answers","ActiveQuiz","Question","answerNumber","question","quizLength","Button","type","disabled","FinishedQuiz","successCount","Object","keys","results","reduce","total","quiz","quizItem","length","onRetry","Quiz","isFinished","activeQuestion","answerState","rightAnswerId","onAnswerClickHandler","answerId","timeout","window","setTimeout","isQuizFinished","clearTimeout","retryHandler","QuizWrapper","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0761d445.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MenuToggle\":\"MenuToggle_MenuToggle__1CLC8\",\"open\":\"MenuToggle_open__3zE6G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Drawer\":\"Drawer_Drawer__3_iLS\",\"close\":\"Drawer_close__1XXn3\",\"active\":\"Drawer_active__1Tebi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__1yyGu\",\"QuizWrapper\":\"Quiz_QuizWrapper__1631-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__cMHbV\",\"Question\":\"ActiveQuiz_Question__1CS_f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem_AnswerItem__q6Vmd\",\"success\":\"AnswerItem_success__3SYnL\",\"error\":\"AnswerItem_error__1lmVV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FinishedQuiz\":\"FinishedQuiz_FinishedQuiz__12ppt\",\"success\":\"FinishedQuiz_success__2u_Nv\",\"error\":\"FinishedQuiz_error__1bTkk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3wdF-\",\"success\":\"Button_success__3ecR4\",\"error\":\"Button_error__3XYfa\",\"primary\":\"Button_primary__15iUk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__14J9O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__2N8jL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__2h5yS\"};","import React from 'react'\r\nimport classes from './MenuToggle.module.scss'\r\n\r\nconst MenuToggle = props => {\r\n    const cls = [\r\n        classes.MenuToggle,\r\n        'fa'\r\n    ];\r\n\r\n    if (props.isOpen) {\r\n        cls.push('fa-times');\r\n        cls.push(classes.open)\r\n    } else {\r\n        cls.push('fa-bars')\r\n    }\r\n\r\n    return (\r\n        <i\r\n            className={cls.join(' ')}\r\n            onClick={props.onToggle}\r\n        />\r\n    )\r\n};\r\n\r\nexport default MenuToggle\r\n","import React from 'react'\r\nimport classes from './Backdrop.module.scss'\r\n\r\nconst Backdrop = props => <div className={classes.Backdrop} onClick={props.onClick}/>;\r\n\r\nexport default Backdrop\r\n","import React, {Component} from 'react'\r\nimport classes from './Drawer.module.scss'\r\n// import index from \"postcss-normalize\";\r\nimport Backdrop from \"../../UI/Backdrop/Backdrop\";\r\n\r\nconst links = [\r\n    1, 2, 3\r\n];\r\n\r\nclass Drawer extends Component {\r\n\r\n    renderLinks() {\r\n        return links.map((link, index) => {\r\n            return (\r\n                <li key={index}>\r\n                    <a>Link {link}</a>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const cls = [classes.Drawer];\r\n        if (!this.props.isOpen) {\r\n            cls.push(classes.close)\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <nav className={cls.join(' ')}>\r\n                    <ul>\r\n                        {this.renderLinks()}\r\n                    </ul>\r\n                </nav>\r\n                {this.props.isOpen ? <Backdrop onClick={this.props.onClose}/> : null}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Drawer\r\n","import React, {Component} from 'react'\r\nimport classes from './Layout.module.scss'\r\nimport MenuToggle from \"../../components/Navigation/MenuToggle/MenuToggle\"\r\nimport Drawer from \"../../components/Navigation/Drawer/Drawer\";\r\n\r\nclass Layout extends Component {\r\n    state = {\r\n        menu: false\r\n    };\r\n\r\n    toggleMenuHandler = () => {\r\n        this.setState({\r\n            menu: !this.state.menu\r\n        })\r\n    };\r\n\r\n    menuCloseHandler = () => {\r\n      this.setState({\r\n          menu: false\r\n      })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout}>\r\n\r\n                <Drawer\r\n                    isOpen={this.state.menu}\r\n                    onClose={this.menuCloseHandler}\r\n                />\r\n\r\n                <MenuToggle\r\n                    onToggle={this.toggleMenuHandler}\r\n                    isOpen={this.state.menu}\r\n                />\r\n\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport classes from './AnswerItem.module.scss'\r\n\r\nconst AnswerItem = props => {\r\n    const cls = [classes.AnswerItem];\r\n\r\n    if (props.state) {\r\n        cls.push(classes[props.state])\r\n    }\r\n\r\n    return (\r\n        <li className={cls.join(' ')}\r\n            onClick={() => props.onAnswerClick(props.answer.id)}>\r\n            {props.answer.text}\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default AnswerItem\r\n","import React from 'react'\r\nimport classes from './AnswersList.module.scss'\r\nimport AnswerItem from './AnswerItem/AnswerItem';\r\n\r\nconst AnswersList = props => {\r\n    return (\r\n        <ul className={classes.AnswersList}>\r\n            {props.answers.map((answer, index) => {\r\n                return (\r\n                    <AnswerItem\r\n                        key={index}\r\n                        answer={answer}\r\n                        onAnswerClick={props.onAnswerClick}\r\n                        state={props.state ? props.state[answer.id] : null}\r\n                    />\r\n                )\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default AnswersList\r\n","import React from 'react'\r\nimport classes from './ActiveQuiz.module.scss'\r\nimport AnswersList from \"./AnswersList/AnswersList\";\r\n\r\nconst ActiveQuiz = props => {\r\n    return (\r\n        <div className={classes.ActiveQuiz}>\r\n            <p className={classes.Question}>\r\n            <span>\r\n                <strong>{props.answerNumber}.</strong>&nbsp;\r\n                {props.question}\r\n            </span>\r\n\r\n                <small>{props.answerNumber} из {props.quizLength}</small>\r\n            </p>\r\n\r\n            <AnswersList\r\n                state={props.state}\r\n                answers={props.answers}\r\n                onAnswerClick={props.onAnswerClick}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ActiveQuiz\r\n","import React from 'react'\r\nimport classes from './Button.module.scss'\r\n\r\nconst Button = props => {\r\n    const cls = [\r\n        classes.Button,\r\n        classes[props.type]\r\n    ];\r\n\r\n    return (\r\n        <button\r\n            onClick={props.onClick}\r\n            className={cls.join(' ')}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    )\r\n};\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport classes from './FinishedQuiz.module.scss'\r\nimport Button from \"../UI/Button/Button\";\r\n\r\nconst FinishedQuiz = props => {\r\n    const successCount = Object.keys(props.results).reduce((total, key) => {\r\n        if (props.results[key] === 'success') {\r\n            total++\r\n        }\r\n        return total\r\n    }, 0);\r\n\r\n    return (\r\n        <div className={classes.FinishedQuiz}>\r\n            <ul>\r\n                {props.quiz.map((quizItem, index) => {\r\n                        const cls = [\r\n                            'fa',\r\n                            props.results[quizItem.id] === 'error' ? 'fa-times' : 'fa-check',\r\n                            classes[props.results[quizItem.id]]\r\n                        ];\r\n\r\n                        return (\r\n                            <li\r\n                                key={index}\r\n                            >\r\n                                <strong>{index + 1}</strong>.&nbsp;\r\n                                {quizItem.question}\r\n                                <i className={cls.join(' ')}/>\r\n                            </li>\r\n                        )\r\n                    }\r\n                )}\r\n\r\n            </ul>\r\n\r\n            <p>Правильно {successCount} из {props.quiz.length}</p>\r\n            <div>\r\n                <Button onClick={props.onRetry} type=\"primary\">Повторить</Button>\r\n                <Button onClick={props.onRetry} type=\"success\">Перейти в список тестов</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FinishedQuiz\r\n","import React, {Component} from 'react'\r\nimport classes from './Quiz.module.scss'\r\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\";\r\nimport FinishedQuiz from \"../../components/FinishedQuiz/FinishedQuiz\";\r\n\r\nclass Quiz extends Component {\r\n    state = {\r\n        results: {}, // {[id]: success error}\r\n        isFinished: false,\r\n        activeQuestion: 0,\r\n        answerState: null, // { [id]: 'success' 'error' }\r\n        quiz: [\r\n            {\r\n                question: 'Какой транспорт лишний?',\r\n                rightAnswerId: 3,\r\n                id: 1,\r\n                answers: [\r\n                    {text: 'Автомобиль', id: 1},\r\n                    {text: 'Фургон', id: 2},\r\n                    {text: 'Самолет', id: 3},\r\n                    {text: 'Грузовик', id: 4}\r\n                ]\r\n            },\r\n            {\r\n                question: 'Какой предмет лишний?',\r\n                rightAnswerId: 1,\r\n                id: 2,\r\n                answers: [\r\n                    {text: 'Кеды', id: 1},\r\n                    {text: 'Пуловер', id: 2},\r\n                    {text: 'Рубашка', id: 3},\r\n                    {text: 'Футболка', id: 4}\r\n                ]\r\n            }\r\n        ]\r\n    };\r\n\r\n    onAnswerClickHandler = answerId => {\r\n        if (this.state.answerState) {\r\n            const key = Object.keys(this.state.answerState)[0];\r\n            if (this.state.answerState[key] === 'success') {\r\n                return\r\n            }\r\n        }\r\n\r\n        const question = this.state.quiz[this.state.activeQuestion];\r\n        const results = this.state.results;\r\n\r\n        if (question.rightAnswerId === answerId) {\r\n            if (!results[question.id]) {\r\n                results[question.id] = 'success'\r\n            }\r\n            this.setState({\r\n                answerState: {[answerId]: 'success'},\r\n                results\r\n            });\r\n\r\n            const timeout = window.setTimeout(() => {\r\n                if (this.isQuizFinished()) {\r\n                    this.setState({\r\n                        isFinished: true\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        activeQuestion: this.state.activeQuestion + 1,\r\n                        answerState: null\r\n                    })\r\n                }\r\n                window.clearTimeout(timeout)\r\n            }, 1000);\r\n\r\n        } else {\r\n            results[question.id] = 'error';\r\n            this.setState({\r\n                answerState: {[answerId]: 'error'},\r\n                results\r\n            })\r\n        }\r\n    };\r\n\r\n    isQuizFinished() {\r\n        return this.state.activeQuestion + 1 === this.state.quiz.length\r\n    }\r\n\r\n    retryHandler = () => {\r\n      this.setState({\r\n          activeQuestion: 0,\r\n          answerState: null,\r\n          isFinished: false,\r\n          results: {}\r\n      })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Quiz}>\r\n                <div className={classes.QuizWrapper}>\r\n                    <h1>Ответьте на все вопросы</h1>\r\n                    {\r\n                        this.state.isFinished\r\n                            ? <FinishedQuiz\r\n                                results={this.state.results}\r\n                                quiz={this.state.quiz}\r\n                                onRetry={this.retryHandler}\r\n                            />\r\n                            : <ActiveQuiz\r\n                                answers={this.state.quiz[this.state.activeQuestion].answers}\r\n                                question={this.state.quiz[this.state.activeQuestion].question}\r\n                                onAnswerClick={this.onAnswerClickHandler}\r\n                                quizLength={this.state.quiz.length}\r\n                                answerNumber={this.state.activeQuestion + 1}\r\n                                state={this.state.answerState}\r\n                            />\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz\r\n","import React, {Component} from 'react'\r\nimport Layout from './hoc/Layout/Layout'\r\nimport Quiz from \"./containers/Quiz/Quiz\"\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Quiz/>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}